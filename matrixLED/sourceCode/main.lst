CCS PCM C Compiler, Version 5.015, 5967               18-Nis-18 11:19

               Filename:   D:\Google Drive\Workspace\CCS-C\matrixLED\sourceCode\main.lst

               ROM used:   235 words (3%)
                           Largest free fragment is 2048
               RAM used:   40 (11%) at main() level
                           47 (13%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   064
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0020:  BCF    0A.0
0021:  BCF    0A.1
0022:  BCF    0A.2
0023:  ADDWF  02,F
0024:  GOTO   00A
0025:  GOTO   00E
0026:  GOTO   012
0027:  GOTO   016
0028:  GOTO   01A
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
*
0049:  MOVLW  49
004A:  MOVWF  04
004B:  BCF    03.7
004C:  MOVF   00,W
004D:  BTFSC  03.2
004E:  GOTO   05D
004F:  MOVLW  01
0050:  MOVWF  78
0051:  CLRF   77
0052:  DECFSZ 77,F
0053:  GOTO   052
0054:  DECFSZ 78,F
0055:  GOTO   051
0056:  MOVLW  4A
0057:  MOVWF  77
0058:  DECFSZ 77,F
0059:  GOTO   058
005A:  GOTO   05B
005B:  DECFSZ 00,F
005C:  GOTO   04F
....................  
....................  
....................  
.................... #use fast_io(b) 
.................... #use fast_io(c) 
....................  
.................... int A[] = {0x03, 0x75, 0x76, 0x75, 0x03}; 
*
006F:  MOVLW  03
0070:  BCF    03.5
0071:  MOVWF  20
0072:  MOVLW  75
0073:  MOVWF  21
0074:  MOVLW  76
0075:  MOVWF  22
0076:  MOVLW  75
0077:  MOVWF  23
0078:  MOVLW  03
0079:  MOVWF  24
.................... int B[] = {0x00, 0x36, 0x36, 0x36, 0x49}; 
007A:  CLRF   25
007B:  MOVLW  36
007C:  MOVWF  26
007D:  MOVWF  27
007E:  MOVWF  28
007F:  MOVLW  49
0080:  MOVWF  29
.................... int C[] = {0x41, 0x3E, 0x3E, 0x3E, 0x5D}; 
0081:  MOVLW  41
0082:  MOVWF  2A
0083:  MOVLW  3E
0084:  MOVWF  2B
0085:  MOVWF  2C
0086:  MOVWF  2D
0087:  MOVLW  5D
0088:  MOVWF  2E
.................... int D[] = {0x00, 0x3E, 0x3E, 0x3E, 0x41}; 
0089:  CLRF   2F
008A:  MOVLW  3E
008B:  MOVWF  30
008C:  MOVWF  31
008D:  MOVWF  32
008E:  MOVLW  41
008F:  MOVWF  33
.................... int E[] = {0x00, 0xB6, 0xB6, 0xB6, 0xBE}; 
0090:  CLRF   34
0091:  MOVLW  B6
0092:  MOVWF  35
0093:  MOVWF  36
0094:  MOVWF  37
0095:  MOVLW  BE
0096:  MOVWF  38
.................... int arti[] = {0x77, 0x77, 0x41, 0x77, 0x77}; 
0097:  MOVLW  77
0098:  MOVWF  39
0099:  MOVWF  3A
009A:  MOVLW  41
009B:  MOVWF  3B
009C:  MOVLW  77
009D:  MOVWF  3C
009E:  MOVWF  3D
.................... int cift_ok[] = {0x6B, 0x5D, 0x00, 0x5D, 0x6B}; 
009F:  MOVLW  6B
00A0:  MOVWF  3E
00A1:  MOVLW  5D
00A2:  MOVWF  3F
00A3:  CLRF   40
00A4:  MOVWF  41
00A5:  MOVLW  6B
00A6:  MOVWF  42
.................... int sutunsec(char s) { 
....................    switch(s) { 
*
0004:  MOVF   49,W
0005:  ADDLW  FB
0006:  BTFSC  03.0
0007:  GOTO   01D
0008:  ADDLW  05
0009:  GOTO   020
....................       case 0: return(0x10);break; 
000A:  MOVLW  10
000B:  MOVWF  78
000C:  GOTO   01D
000D:  GOTO   01D
....................       case 1: return(0x08);break; 
000E:  MOVLW  08
000F:  MOVWF  78
0010:  GOTO   01D
0011:  GOTO   01D
....................       case 2: return(0x04);break; 
0012:  MOVLW  04
0013:  MOVWF  78
0014:  GOTO   01D
0015:  GOTO   01D
....................       case 3: return(0x02);break; 
0016:  MOVLW  02
0017:  MOVWF  78
0018:  GOTO   01D
0019:  GOTO   01D
....................       case 4: return(0x01);break; 
001A:  MOVLW  01
001B:  MOVWF  78
001C:  GOTO   01D
....................    } 
001D:  BCF    0A.3
001E:  BCF    0A.4
001F:  GOTO   03C (RETURN)
.................... } 
.................... void matris_karakter_gonder(char harf[], int tekrar) { 
....................    int i, j, k; 
....................     
....................    for(i = 1; i < tekrar; i++) { 
*
0029:  MOVLW  01
002A:  MOVWF  46
002B:  MOVF   45,W
002C:  SUBWF  46,W
002D:  BTFSC  03.0
002E:  GOTO   063
....................       for(k = 0; k < 10; k++) { 
002F:  CLRF   48
0030:  MOVF   48,W
0031:  SUBLW  09
0032:  BTFSS  03.0
0033:  GOTO   061
....................          for(j = 0; j < 5; j++) { 
0034:  CLRF   47
0035:  MOVF   47,W
0036:  SUBLW  04
0037:  BTFSS  03.0
0038:  GOTO   05F
....................             output_c(sutunsec(j)); 
0039:  MOVF   47,W
003A:  MOVWF  49
003B:  GOTO   004
003C:  MOVF   78,W
003D:  MOVWF  07
....................             output_b(harf[j]); 
003E:  MOVF   47,W
003F:  ADDWF  43,W
0040:  MOVWF  04
0041:  BCF    03.7
0042:  BTFSC  44.0
0043:  BSF    03.7
0044:  MOVF   00,W
0045:  MOVWF  49
0046:  MOVWF  06
....................             delay_ms(1); 
0047:  MOVLW  01
0048:  MOVWF  49
*
005D:  INCF   47,F
005E:  GOTO   035
....................          } 
005F:  INCF   48,F
0060:  GOTO   030
....................       } 
0061:  INCF   46,F
0062:  GOTO   02B
....................    } 
0063:  RETURN
.................... } 
....................  
.................... void main() 
0064:  MOVF   03,W
0065:  ANDLW  1F
0066:  MOVWF  03
0067:  BSF    03.5
0068:  BSF    1F.0
0069:  BSF    1F.1
006A:  BSF    1F.2
006B:  BCF    1F.3
006C:  MOVLW  07
006D:  MOVWF  1C
006E:  BCF    03.7
.................... { 
....................    setup_psp(PSP_DISABLED); 
*
00A7:  BSF    03.5
00A8:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
00A9:  BCF    03.5
00AA:  CLRF   10
....................    setup_timer_2(T2_DISABLED, 0, 1); 
00AB:  MOVLW  00
00AC:  MOVWF  78
00AD:  MOVWF  12
00AE:  MOVLW  00
00AF:  BSF    03.5
00B0:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
00B1:  BSF    1F.0
00B2:  BSF    1F.1
00B3:  BSF    1F.2
00B4:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
00B5:  BCF    03.5
00B6:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
00B7:  MOVLW  F0
00B8:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF); 
00B9:  ANDWF  1D,F
....................     
....................    set_tris_b(0x00); 
00BA:  MOVLW  00
00BB:  BSF    03.5
00BC:  MOVWF  06
....................    set_tris_c(0x00); 
00BD:  MOVWF  07
....................    while(1) 
....................    { 
....................       matris_karakter_gonder(A,30); 
00BE:  BCF    03.5
00BF:  CLRF   44
00C0:  MOVLW  20
00C1:  MOVWF  43
00C2:  MOVLW  1E
00C3:  MOVWF  45
00C4:  CALL   029
....................       matris_karakter_gonder(B,30); 
00C5:  CLRF   44
00C6:  MOVLW  25
00C7:  MOVWF  43
00C8:  MOVLW  1E
00C9:  MOVWF  45
00CA:  CALL   029
....................       matris_karakter_gonder(C,20); 
00CB:  CLRF   44
00CC:  MOVLW  2A
00CD:  MOVWF  43
00CE:  MOVLW  14
00CF:  MOVWF  45
00D0:  CALL   029
....................       matris_karakter_gonder(D,20); 
00D1:  CLRF   44
00D2:  MOVLW  2F
00D3:  MOVWF  43
00D4:  MOVLW  14
00D5:  MOVWF  45
00D6:  CALL   029
....................       matris_karakter_gonder(E,20); 
00D7:  CLRF   44
00D8:  MOVLW  34
00D9:  MOVWF  43
00DA:  MOVLW  14
00DB:  MOVWF  45
00DC:  CALL   029
....................       matris_karakter_gonder(arti,20); 
00DD:  CLRF   44
00DE:  MOVLW  39
00DF:  MOVWF  43
00E0:  MOVLW  14
00E1:  MOVWF  45
00E2:  CALL   029
....................       matris_karakter_gonder(cift_ok,20); 
00E3:  CLRF   44
00E4:  MOVLW  3E
00E5:  MOVWF  43
00E6:  MOVLW  14
00E7:  MOVWF  45
00E8:  CALL   029
00E9:  GOTO   0BF
....................    } 
....................  
.................... } 
00EA:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
